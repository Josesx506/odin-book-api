// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SocialSession {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model SocialUser {
  id        Int      @id @default(autoincrement())
  fullname  String
  username  String
  email     String   @unique
  password  String?
  bio       String?
  gravatar  String?
  token     String?
  githubotp String?
  createdAt DateTime @default(now())

  // Friends list (one-directional)
  friends  SocialFriendship[] @relation("UserFriends")
  friendOf SocialFriendship[] @relation("FriendOf")

  // Posts and Comments
  posts    SocialPost[]
  comments SocialComment[]

  // Likes and views
  likedposts    PostLike[]
  likedcomments CommentLike[]
  viewedposts   PostView[]
}

model SocialFriendship {
  id        Int        @id @default(autoincrement())
  user      SocialUser @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  friend    SocialUser @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  Int
  createdAt DateTime   @default(now())

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model SocialPost {
  id        Int             @id @default(autoincrement())
  body      String
  postimg   String?
  authorId  Int
  likes     PostLike[]
  views     PostView[]
  author    SocialUser      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  comments  SocialComment[]

  @@index([authorId])
}

model SocialComment {
  id         Int           @id @default(autoincrement())
  body       String
  commentimg String?
  authorId   Int
  author     SocialUser    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId     Int
  post       SocialPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes      CommentLike[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([authorId])
  @@index([postId])
}

model PostLike {
  id     Int        @id @default(autoincrement())
  user   SocialUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([userId, postId])
  @@index([postId])
}

model CommentLike {
  id        Int           @id @default(autoincrement())
  user      SocialUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   SocialComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
  @@index([commentId])
}

model PostView {
  id     Int        @id @default(autoincrement())
  user   SocialUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([userId, postId])
  @@index([postId])
}
